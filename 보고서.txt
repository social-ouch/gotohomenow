1번쨰 코드
push : sp를 1만큼 올려주고 sp값을 토대로 stack_info, call_stack 값을 정해서
스택 프레임을 형성하였다.
 
stack_info 값을 정하는데 정의는 2차원 배열로 되어있지만 print_stack 함수에선 1차원 배열의 형태로 printf에 들어있어 어떻게 원하는 값을 집어 넣을 줄 모르겠어서
gpt에게 물어보았다,,,,  
결과적으로 strcpy라는 키워드를 알게 되어서 이용했다.

pop : sp 값을 1내려주어 print_stack함수를 실행하였을때 출력이 안되게 해버렸다.
       또한 SFP1, SFP2, SFP3를 전역변수로 설정하여 ebp의 이동을 나타내었다.

문제점 : 누가봐도 뭔가 더러워보인다. (똑같은 코드가 반복됨.)
	   단순히 sp값을 내려 보이지 않게 하는것 만으로는 pop을 구현했다고 보기엔
	   어려움이 있어보인다.
	   
2번쨰 코드

1번쨰 코드에서 push 와 pop를 함수로 정의해서 보기 편하게? 만들었다.

문제점 : ebp이동을 좀 다른 방식으로 해볼려고 했는데 차라리 1번쨰 방법으로 하는게 더 좋아보인다.

3번쨰 코드

push, pop, exit 등 사용자가 몇가지 행동을 선택하여 할 수 있게끔 해보았다.
2번쨰 코드에서 만든 push, pop 함수를 그대로 이용하였지만
main 함수와 func1~3함수의 형식을 유지하고 내가 생각한것을 만들기엔 역부족이였어서 맘대로 수정을 좀 했다..

문제점 : 전역변수가 좀 많은듯하다,, 전역변수를 이용하지 않고 ebp의 이동을 나타내는 방법을 
	   찾아야할것 같다.

